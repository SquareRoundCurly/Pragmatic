from typing import Callable, Self, List

def initialize() -> None: ...
def task(task: str | Callable) -> None: ...
def cleanup() -> None: ...
def print(msg: str) -> None: ...

class ScopeTimer(): ...

class Graph():
	def add_edge(self: Self, source: str, target: str): ...
	def print_topological_generations(self: Self): ...
	def get_node_generations(self: Self) -> List[List[Node]]: ...

class Node():
	def __init__(self: Self, name: str): ...
	def get_name(self: Self) -> str: ...