from typing import Callable, Optional, Self, List

def initialize() -> None: ...
def task(task: str | Callable) -> None: ...
def cleanup() -> None: ...
def print(msg: str) -> None: ...

class ScopeTimer(): ...

class Graph():
	def get_node(self, Self, name: str) -> Node: ...
	def add_node(self: Self, name: str, task: Optional[str | Callable]) -> Node: ...
	def add_edge(self: Self, source: str | Node, target: str | Node) -> Edge: ...
	def print_topological_generations(self: Self): ...
	def get_node_generations(self: Self) -> List[List[Node]]: ...
	def exec(self: Self) -> bool: ...

class Node():
	def get_name(self: Self) -> str: ...
	def __exec(self: Self) -> None: ...
	def get_result(self: Self) -> bool: ...
	def get_parents(self: Self) -> List[Node]: ...

class Edge():
	def __exec(self: Self) -> None: ...
	def get_result(self: Self) -> bool: ...