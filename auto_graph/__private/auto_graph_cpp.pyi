from typing import Callable, Optional, Self, List

def cleanup() -> None: ...
def reinit() -> None: ...
def print(msg: str) -> None: ...

def task(task: Callable) -> None: ...
def exec() -> None: ...

def test() -> None: ...

def internal_runner(): ...
def run_in_subprocess(): ...

class Task():
	def exec(): ...

class Node():
	def __init__(self, name: str): ...
	def name(self) -> str: ...

class Graph():
	def add_node(name: str, task: Task): ...
	def add_edge(fromName: str, toName: str): ...
	def topological_generations() -> List[List[str]]: ...
	def run_tasks(): ...
	def get_node(name: str) -> Node: ...
	def get_parents(name: str) -> List[Node]: ...

class ScopeTimer():
	...